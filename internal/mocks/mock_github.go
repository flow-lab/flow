// Code generated by MockGen. DO NOT EDIT.
// Source: github.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v27/github"
	reflect "reflect"
)

// MockFlowGithubService is a mock of FlowGithubService interface
type MockFlowGithubService struct {
	ctrl     *gomock.Controller
	recorder *MockFlowGithubServiceMockRecorder
}

// MockFlowGithubServiceMockRecorder is the mock recorder for MockFlowGithubService
type MockFlowGithubServiceMockRecorder struct {
	mock *MockFlowGithubService
}

// NewMockFlowGithubService creates a new mock instance
func NewMockFlowGithubService(ctrl *gomock.Controller) *MockFlowGithubService {
	mock := &MockFlowGithubService{ctrl: ctrl}
	mock.recorder = &MockFlowGithubServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFlowGithubService) EXPECT() *MockFlowGithubServiceMockRecorder {
	return m.recorder
}

// CreateRepository mocks base method
func (m *MockFlowGithubService) CreateRepository(ctx context.Context, repo string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepository", ctx, repo)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepository indicates an expected call of CreateRepository
func (mr *MockFlowGithubServiceMockRecorder) CreateRepository(ctx, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepository", reflect.TypeOf((*MockFlowGithubService)(nil).CreateRepository), ctx, repo)
}

// ArchiveRepository mocks base method
func (m *MockFlowGithubService) ArchiveRepository(ctx context.Context, repo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArchiveRepository", ctx, repo)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArchiveRepository indicates an expected call of ArchiveRepository
func (mr *MockFlowGithubServiceMockRecorder) ArchiveRepository(ctx, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveRepository", reflect.TypeOf((*MockFlowGithubService)(nil).ArchiveRepository), ctx, repo)
}

// Rename mocks base method
func (m *MockFlowGithubService) Rename(ctx context.Context, repo, newRepo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rename", ctx, repo, newRepo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rename indicates an expected call of Rename
func (mr *MockFlowGithubServiceMockRecorder) Rename(ctx, repo, newRepo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*MockFlowGithubService)(nil).Rename), ctx, repo, newRepo)
}

// MockmimiroGithubClient is a mock of mimiroGithubClient interface
type MockmimiroGithubClient struct {
	ctrl     *gomock.Controller
	recorder *MockmimiroGithubClientMockRecorder
}

// MockmimiroGithubClientMockRecorder is the mock recorder for MockmimiroGithubClient
type MockmimiroGithubClientMockRecorder struct {
	mock *MockmimiroGithubClient
}

// NewMockmimiroGithubClient creates a new mock instance
func NewMockmimiroGithubClient(ctrl *gomock.Controller) *MockmimiroGithubClient {
	mock := &MockmimiroGithubClient{ctrl: ctrl}
	mock.recorder = &MockmimiroGithubClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockmimiroGithubClient) EXPECT() *MockmimiroGithubClientMockRecorder {
	return m.recorder
}

// RepositoriesCreate mocks base method
func (m *MockmimiroGithubClient) RepositoriesCreate(ctx context.Context, org string, repo *github.Repository) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepositoriesCreate", ctx, org, repo)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RepositoriesCreate indicates an expected call of RepositoriesCreate
func (mr *MockmimiroGithubClientMockRecorder) RepositoriesCreate(ctx, org, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepositoriesCreate", reflect.TypeOf((*MockmimiroGithubClient)(nil).RepositoriesCreate), ctx, org, repo)
}

// TeamsGetTeamBySlug mocks base method
func (m *MockmimiroGithubClient) TeamsGetTeamBySlug(ctx context.Context, org, slug string) (*github.Team, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamsGetTeamBySlug", ctx, org, slug)
	ret0, _ := ret[0].(*github.Team)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// TeamsGetTeamBySlug indicates an expected call of TeamsGetTeamBySlug
func (mr *MockmimiroGithubClientMockRecorder) TeamsGetTeamBySlug(ctx, org, slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamsGetTeamBySlug", reflect.TypeOf((*MockmimiroGithubClient)(nil).TeamsGetTeamBySlug), ctx, org, slug)
}

// TeamsAddTeamRepo mocks base method
func (m *MockmimiroGithubClient) TeamsAddTeamRepo(ctx context.Context, team int64, owner, repo string, opt *github.TeamAddTeamRepoOptions) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamsAddTeamRepo", ctx, team, owner, repo, opt)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeamsAddTeamRepo indicates an expected call of TeamsAddTeamRepo
func (mr *MockmimiroGithubClientMockRecorder) TeamsAddTeamRepo(ctx, team, owner, repo, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamsAddTeamRepo", reflect.TypeOf((*MockmimiroGithubClient)(nil).TeamsAddTeamRepo), ctx, team, owner, repo, opt)
}

// RepositoriesGetRepo mocks base method
func (m *MockmimiroGithubClient) RepositoriesGetRepo(ctx context.Context, org, repo string) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepositoriesGetRepo", ctx, org, repo)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RepositoriesGetRepo indicates an expected call of RepositoriesGetRepo
func (mr *MockmimiroGithubClientMockRecorder) RepositoriesGetRepo(ctx, org, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepositoriesGetRepo", reflect.TypeOf((*MockmimiroGithubClient)(nil).RepositoriesGetRepo), ctx, org, repo)
}

// RepositoriesEditRepo mocks base method
func (m *MockmimiroGithubClient) RepositoriesEditRepo(ctx context.Context, org, repo string, repository *github.Repository) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepositoriesEditRepo", ctx, org, repo, repository)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RepositoriesEditRepo indicates an expected call of RepositoriesEditRepo
func (mr *MockmimiroGithubClientMockRecorder) RepositoriesEditRepo(ctx, org, repo, repository interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepositoriesEditRepo", reflect.TypeOf((*MockmimiroGithubClient)(nil).RepositoriesEditRepo), ctx, org, repo, repository)
}
