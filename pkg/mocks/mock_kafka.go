// Code generated by MockGen. DO NOT EDIT.
// Source: kafka.go

// Package mocks is a generated GoMock package.
package mocks

import (
	pkg "github.com/flow-lab/flow/pkg"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFlowKafka is a mock of FlowKafka interface
type MockFlowKafka struct {
	ctrl     *gomock.Controller
	recorder *MockFlowKafkaMockRecorder
}

// MockFlowKafkaMockRecorder is the mock recorder for MockFlowKafka
type MockFlowKafkaMockRecorder struct {
	mock *MockFlowKafka
}

// NewMockFlowKafka creates a new mock instance
func NewMockFlowKafka(ctrl *gomock.Controller) *MockFlowKafka {
	mock := &MockFlowKafka{ctrl: ctrl}
	mock.recorder = &MockFlowKafkaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFlowKafka) EXPECT() *MockFlowKafkaMockRecorder {
	return m.recorder
}

// CreateTopic mocks base method
func (m *MockFlowKafka) CreateTopic(topic string, numPartitions, replicationFactor int, retentionMs string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopic", topic, numPartitions, replicationFactor, retentionMs)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTopic indicates an expected call of CreateTopic
func (mr *MockFlowKafkaMockRecorder) CreateTopic(topic, numPartitions, replicationFactor, retentionMs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopic", reflect.TypeOf((*MockFlowKafka)(nil).CreateTopic), topic, numPartitions, replicationFactor, retentionMs)
}

// DeleteTopic mocks base method
func (m *MockFlowKafka) DeleteTopic(topic string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTopic", topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTopic indicates an expected call of DeleteTopic
func (mr *MockFlowKafkaMockRecorder) DeleteTopic(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopic", reflect.TypeOf((*MockFlowKafka)(nil).DeleteTopic), topic)
}

// DescribeTopic mocks base method
func (m *MockFlowKafka) DescribeTopic(topic string) (*pkg.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTopic", topic)
	ret0, _ := ret[0].(*pkg.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTopic indicates an expected call of DescribeTopic
func (mr *MockFlowKafkaMockRecorder) DescribeTopic(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTopic", reflect.TypeOf((*MockFlowKafka)(nil).DescribeTopic), topic)
}

// Produce mocks base method
func (m *MockFlowKafka) Produce(topic string, msg []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", topic, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce
func (mr *MockFlowKafkaMockRecorder) Produce(topic, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockFlowKafka)(nil).Produce), topic, msg)
}
